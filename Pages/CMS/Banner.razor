@page "/cms/banner"
@layout Taraweb.Shared.cms.MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject TarawebM1Service TarawebM1Service
@attribute [Authorize]
<PageTitle>Banner</PageTitle>
<RadzenContent Container="main">
    <RadzenHeading Size="H1" Text="Banner" />
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" />
    @*<RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>*@
    @*<RadzenTextBox Placeholder="Search ..." style="display: block; margin-bottom: 10px; width: 100%" @oninput="@Search" />*@

    <div class="row">


        @foreach (var g in banners)
        {
            <div class="col-lg-12 col-xl-12 ">
                <div style="width:100%;height:280px; background-image:url(@g.ImageUrl); background-position:center; background-repeat:no-repeat;background-size:cover"></div>

                <RadzenCard Style="padding:5px;">
                    <div class="text-left">
                       Name: @g.Name
                        <p>Valid: @g.DateStart.ToString("dd/MM/yyyy") - @g.DateFinish.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="text-right">
                        <RadzenButton Variant="Variant.Text" Text="x" Class="rz-text-danger-color" Click="@(args=>delete(args,g.Id))" />
                    </div>
                </RadzenCard>

            </div>
        }


    </div>

</RadzenContent>
@code {

    protected IEnumerable<Taraweb.Models.TarawebM1.Banner> banners;

    protected RadzenDataGrid<Taraweb.Models.TarawebM1.Banner> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        banners = await TarawebM1Service.GetBanners(new Query { Filter = $@"i => i.Name.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        banners = await TarawebM1Service.GetBanners(new Query { Filter = $@"i => i.Name.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("cms/add-banner");
    }

    protected async Task EditRow(Taraweb.Models.TarawebM1.Gallery args)
    {
        NavigationManager.NavigateTo($"edit-gallery/{args.Id}");
    }

    protected async Task delete(MouseEventArgs args, int id)
    {
        await TarawebM1Service.DeleteBanner(id);

    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, Taraweb.Models.TarawebM1.Gallery gallery)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await TarawebM1Service.DeleteGallery(gallery.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Error",
                Detail = $"Unable to delete Gallery"
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await TarawebM1Service.ExportGalleriesToCSV(new Query
            {
                Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",
                OrderBy = $"{grid0.Query.OrderBy}",
                Expand = "",
                Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
            }, "Galleries");
        }

        if (args == null || args.Value == "xlsx")
        {
            await TarawebM1Service.ExportGalleriesToExcel(new Query
            {
                Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",
                OrderBy = $"{grid0.Query.OrderBy}",
                Expand = "",
                Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
            }, "Galleries");
        }
    }
}
